* --imagescale : If there are regions, scale the data inside the regions, not the whole image
	Preserving the region bounding box TL, but altering the width and offsets
	This will avoid data from elesewhere being picked up


* --regionshift : Could look at shifting each tile row/column independently
	Complex though since the separate rows/columns would need to have their shifts split into the tile sized regions




* Option to favour palette creation from existing char/tile/sprite definition.
	This is useful for re-use of an existing char/tile/sprite as a shadow or silhouette.
	Steps:
	Note char shape, being careful to preserve any forced colours
		This means a character like this, where 0 is forced to be index 0:
			00001234
			00000123
			00000012
			00000001
			00000000
			01241230
			00000000
			00000000
		Can be mapped to be the same as this character which is intended to be its "shadow":
			00001111
			00000111
			00000011
			00000001
			00000000
			01111110
			00000000
			00000000
	Spot duplicate, taking into account any flips
	Just create a new palette containing 4 black colours to cover the entire range of the colour indexes in the original definition
	* Note: To facilitate the process, it may be required to sort the definitions to process in descending order of complexity
		This means counting the number of distinct used colours for a definition and processing those first



* Option to ignore forced index 0 pixels at input, makes them transparent



* // TODO: palette = (HashMap<Integer, Integer>) forcedColourIndex.clone();
    Palette loading will need to enforce the palette size groups based on the original palette
	
	
	
* To improve duplicate character and flips detection, try permutations of output planes and *once only* reorganise the palette.
	Or do not sort colours in palettes, this will preserve the ordering and weighting of pixels detected in chars.
	This will need some carefully created test data to exercise these cases.



* Try the full "old bridge" in mode7 with full 256 colour palette and index 0=0,0,0



* Tidy code and unit test



* Detect identical output tile data, with H/V flips, from the output binary point of view and avoid
    Instead use the original index for screen output



* Make the inputs and outputs configurable via a text config file, with includes



* Banded palette conversion. While scanning each row down the image, if the number of palettes for the bank overflows the maximum (16 palettes currently) then start processing the line again in a new bank.
	This would reduce the visible horizontal bands seen in the current @Demo13



* Replace RGB colour on input with another colour. Useful for replacing any animated colours with a static colour.




* When converting outputScaled4 optionally trim left/right/top/bottom edges to squeeze as much image data as possible.
