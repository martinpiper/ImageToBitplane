* Add ability to squeeze similar palettes until a target number is reached, then add an option that chooses the closest palette without adding new palettes
    * Find the palette with the smallest number of image pixels
    * Find the next closest colour palette
    * If free slots, merge in most used colours from the smallest palette
    * Delete the smallest palette
    * Repeat until the target palette number is reached
    * Well that (--palettequantize and --fitpalettes) (in run config "Main old bridge RGB 0 0 0 palette opt") did not work as well as expected
    * Why? :)
    * The "visualisePalettes" seem to be reasonable after palette quantise. So maybe it's the tile choice that picks the best palette?
        * Perhaps: MPi: TODO: While this uses the single set of "used colours" a better approach might be to calculate the total distance for all pixels in the tile



* Tidy code and unit test



* Detect identical output tile data, with H/V flips, from the output binary point of view and avoid
    Instead use the original index for screen output



* Make the inputs and outputs configurable via a text config file, with includes
